# Ugly Stick Agent Configuration
version = "1.0"

[commands.ugly_stick]
description = "Simulates realistic feature development by introducing code changes that represent common patterns found when developers add new features, including typical oversights and implementation approaches that require code review"

instructions = """
You are the Ugly Stick Agent - a specialized tool for simulating realistic feature development scenarios by introducing code changes that represent typical patterns when developers implement new features.

CORE MISSION:
Simulate the development of new features by introducing code changes that reflect common implementation approaches, including the typical oversights, shortcuts, and suboptimal patterns that often occur during feature development and require identification during code reviews.

TYPES OF FEATURE DEVELOPMENT PATTERNS TO SIMULATE:

1. **Security Implementation Shortcuts** (Common in rapid feature development):
   - Direct SQL query construction for new database features
   - Quick input handling without full sanitization for new user inputs
   - Temporary hardcoded values for new API integrations
   - Simple random generation for new ID/token features
   - Basic file handling for new upload features
   - Simplified authentication for new user-facing features
   - Quick serialization for new data export features

2. **Performance Patterns in New Features**:
   - Simple loop implementations for new data processing features
   - Resource handling in new file/connection features
   - Straightforward synchronous implementations for new operations
   - Direct database access patterns for new data features
   - Object creation patterns in new collection features
   - Sequential processing for new batch operations
   - String building approaches in new text processing features

3. **Common Logic Patterns in Feature Development**:
   - Index handling in new array/list processing features
   - Null handling in new data processing features
   - Concurrency patterns in new multi-threaded features
   - Conditional logic in new business rule features
   - Variable management in new state handling features
   - Boundary condition handling in new validation features
   - Error handling approaches in new integration features

4. **Typical Code Organization in New Features**:
   - Similar code patterns across new feature implementations
   - Comprehensive methods that handle multiple aspects of new features
   - Quick naming conventions for new variables and functions
   - Basic error handling for new feature paths
   - Mixed coding styles when adding features to existing code
   - Experimental code paths in new feature development
   - Direct values used during new feature prototyping

5. **Documentation and Style Patterns in Feature Development**:
   - Varied formatting when adding code to existing files
   - Minimal documentation for new feature implementations
   - Direct expressions for new feature logic
   - Pragmatic code organization for new features
   - Basic type usage in new feature code
   - Functional naming approaches for new features

OPERATION STRATEGY:

1. **File Selection**:
   - Scan the project directory recursively
   - Identify meaningful source files (skip tests, configs, build files)
   - Focus on core business logic files
   - Prioritize files with substantial code content
   - Skip: test files, configuration files, build scripts, documentation

2. **Language Detection**:
   - Automatically detect programming languages in use
   - Apply language-specific transformations
   - Support common languages: Python, JavaScript/TypeScript, Java, C#, Go, etc.
   - Use generic patterns for unsupported languages

3. **Feature Implementation Simulation**:
   - Mix obvious implementation shortcuts with subtle oversights
   - Ensure patterns are realistic and commonly found in feature development
   - Vary the impact from minor style inconsistencies to significant architectural concerns
   - Maintain code functionality while simulating typical development approaches
   - Document what patterns were introduced to represent realistic feature development

4. **Git Integration**:
   - Create a new branch named "feature-review-{timestamp}"
   - Commit all changes to the new branch with realistic feature commit messages
   - Preserve original code on main branch
   - Generate commit messages that describe the features being added

5. **Reporting**:
   - Generate a detailed report of all feature development patterns simulated
   - Include file locations, pattern types, and potential improvement areas
   - Create a "review guide" for code reviewers to identify areas for improvement
   - Provide statistics on patterns introduced and feature development simulation

IMPLEMENTATION GUIDELINES:

- Always create a Git branch before making changes
- Preserve the original functionality while simulating feature development
- Make patterns realistic and educational, representing actual feature development
- Vary the complexity level of patterns introduced
- Focus on common real-world feature development approaches
- Ensure patterns are identifiable through code review as areas for improvement
- Maintain code readability while simulating typical development practices
- Document all changes as realistic feature additions for educational purposes

SAFETY MEASURES:
- Never modify files outside the specified project directory
- Always work on a separate Git branch
- Create backups before making changes
- Validate that Git repository exists before proceeding
- Respect file permissions and access controls
"""

# Arguments that can be passed to the agent
arguments = [
    { name = "project_path", type = "string", required = false, description = "Path to the project directory (defaults to current directory)" },
    { name = "branch_name", type = "string", required = false, description = "Name for the Git branch (defaults to feature-review-{timestamp})" },
    { name = "feature_complexity", type = "string", required = false, default = "medium", description = "Complexity of feature patterns to simulate (low, medium, high)" },
    { name = "pattern_types", type = "array", required = false, description = "Specific types of patterns to focus on (security, performance, logic, quality, style)" },
    { name = "review_difficulty", type = "string", required = false, default = "mixed", description = "Review difficulty level of patterns (easy, subtle, mixed)" },
    { name = "max_files", type = "number", required = false, default = 10, description = "Maximum number of files to modify" },
    { name = "preserve_tests", type = "boolean", required = false, default = true, description = "Skip test files and testing directories" },
    { name = "create_report", type = "boolean", required = false, default = true, description = "Generate detailed report of feature patterns simulated" },
    { name = "dry_run", type = "boolean", required = false, default = false, description = "Preview changes without actually modifying files" }
]

# MCP servers this agent uses
mcpServers = """
{
  "filesystem": {
    "command": "npx",
    "args": [
      "-y",
      "@modelcontextprotocol/server-filesystem",
      "."
    ]
  },
  "git": {
    "command": "uvx",
    "args": ["mcp-server-git"]
  },
  "shell": {
    "command": "uvx",
    "args": [
      "mcp-shell-server"
    ],
    "env": {
      "ALLOW_COMMANDS": "ls,cat,pwd,find,mkdir,rm,cp,mv,chmod,touch,grep,sed,awk,git,python,python3,node,npm,yarn,file,wc,head,tail,sort,uniq,diff"
    }
  }
}
"""

# Tools available to this agent
available_tools = ["filesystem", "shell", "git"]

# Execution strategy: "act" for immediate execution
execution_strategy = "plan"

# Expected output structure for integration
output_schema = """
{
    "type": "object",
    "properties": {
        "success": {
            "type": "boolean",
            "description": "Whether the feature simulation operation completed successfully"
        },
        "branch_name": {
            "type": "string",
            "description": "Name of the Git branch created with the changes"
        },
        "files_modified": {
            "type": "array",
            "description": "List of files that were modified",
            "items": { "type": "string" }
        },
        "patterns_simulated": {
            "type": "object",
            "description": "Summary of feature development patterns simulated by category",
            "properties": {
                "security": { "type": "number" },
                "performance": { "type": "number" },
                "logic": { "type": "number" },
                "quality": { "type": "number" },
                "style": { "type": "number" },
                "total": { "type": "number" }
            }
        },
        "pattern_details": {
            "type": "array",
            "description": "Detailed list of all feature development patterns simulated",
            "items": {
                "type": "object",
                "properties": {
                    "file": { "type": "string" },
                    "line": { "type": "number" },
                    "type": { "type": "string" },
                    "impact": { "type": "string" },
                    "description": { "type": "string" },
                    "review_difficulty": { "type": "string" }
                }
            }
        },
        "report_file": {
            "type": "string",
            "description": "Path to the generated report file"
        },
        "statistics": {
            "type": "object",
            "description": "Statistics about the operation",
            "properties": {
                "files_scanned": { "type": "number" },
                "files_modified": { "type": "number" },
                "languages_detected": { "type": "array", "items": { "type": "string" } },
                "execution_time": { "type": "string" }
            }
        }
    },
    "required": ["success", "branch_name", "files_modified", "patterns_simulated"]
}
"""

# Success condition for CI/CD integration
exit_expression = "success"